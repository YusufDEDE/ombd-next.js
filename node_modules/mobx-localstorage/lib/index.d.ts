export declare class LocalStorage implements Map<string, any>, Storage {
    [Symbol.toStringTag]: "Map";
    private _keyBoxes;
    private _valueBoxes;
    private _keys;
    private _keysAtom;
    private _is_all_keys_observed;
    constructor();
    readonly length: number;
    readonly size: number;
    key(index: number): string | null;
    getItem(key: string): any;
    setItem(key: string, value: any): void;
    removeItem(key: string): void;
    has(key: string): boolean;
    get(key: string): any;
    set(key: string, value?: any): this;
    delete(key: string): boolean;
    clear(): void;
    keys(): IterableIterator<string>;
    values(): IterableIterator<any>;
    entries(): IterableIterator<[string, any]>;
    [Symbol.iterator](): IterableIterator<[string, any]>;
    forEach<C>(callbackfn: (this: C, value: any, key: string, map: LocalStorage) => void, thisArg: C): void;
    forEach(callbackfn: (value: any, key: string, map: LocalStorage) => void, thisArg?: any): void;
    private _set;
    private _delete;
    private _clear;
    private _get_key_box;
    private _get_value_box;
    private _syncAllKeys;
}
export declare function parseValue(value: any): any;
declare const _default: LocalStorage;
export default _default;
