export declare class LocalStorage implements Storage {
    readonly supported: boolean;
    protected storage: Storage;
    protected _events: {
        [P in keyof ReactiveLocalStorageEventMap]?: Set<ReactiveLocalStorageEventMap[P]>;
    };
    constructor(window?: Window, storage?: Storage);
    readonly length: number;
    key(index: number): string | null;
    getItem(key: string): string | null;
    setItem(key: string, value: string): void;
    removeItem(key: string): void;
    clear(): void;
    on<K extends keyof ReactiveLocalStorageEventMap>(name: K, fn: ReactiveLocalStorageEventMap[K]): void;
    off<K extends keyof ReactiveLocalStorageEventMap>(name: K, fn: ReactiveLocalStorageEventMap[K]): void;
    feed(key: string, newValue: string | null): void;
    protected emit<K extends keyof ReactiveLocalStorageEventMap>(name: K, ...args: ReactiveLocalStorageEventMap[K] extends (...args: infer T) => any ? T : any[]): void;
}
export interface ReactiveLocalStorageEventMap {
    change(key: string, newValue: string | null): any;
}
export declare function listen(target: Window, cb: (this: Window, ev: WindowEventMap['storage']) => any): boolean;
